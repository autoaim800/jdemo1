package com.billsoft.triptra.inserter;

import java.math.BigInteger;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;

import com.billsoft.triptra.xsd.queryproducts.Decimal103;
import com.billsoft.triptra.xsd.queryproducts.Decimal129;
import com.billsoft.triptra.xsd.queryproducts.Decimal154;

/**
 * a class with nasty code generated by sql2java.py
 * 
 * @author bill
 * 
 */
public class DbInserter {

    public static void error(String s) {
        System.err.println(s);
    }

    public static void nullOrBoolean(PreparedStatement pstmt, int i, boolean b) throws SQLException {
        pstmt.setBoolean(i, b);
    }

    public static void nullOrDate(PreparedStatement pstmt, int i, java.util.Date date)
            throws SQLException {
        if (null == date) {
            pstmt.setNull(i, java.sql.Types.DATE);
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd");
            pstmt.setString(i, sdf.format(date));
        }
    }

    public static void nullOrFloat(PreparedStatement pstmt, int i, Decimal103 obj)
            throws SQLException {
        if (null == obj) {
            pstmt.setNull(i, java.sql.Types.FLOAT);
        } else {
            pstmt.setFloat(i, obj.getDecimal103().floatValue());
        }
    }

    public static void nullOrFloat(PreparedStatement pstmt, int i, Decimal129 dec)
            throws SQLException {
        if (null == dec) {
            pstmt.setNull(i, java.sql.Types.FLOAT);
        } else {
            pstmt.setFloat(i, dec.getDecimal129().floatValue());
        }
    }

    public static void nullOrFloat(PreparedStatement pstmt, int i, Decimal154 dec)
            throws SQLException {
        if (null == dec) {
            pstmt.setNull(i, java.sql.Types.FLOAT);
        } else {
            pstmt.setFloat(i, dec.getDecimal154().floatValue());
        }
    }

    public static void nullOrInt(PreparedStatement pstmt, int i, BigInteger obj)
            throws SQLException {
        if (null == obj) {
            pstmt.setNull(i, java.sql.Types.INTEGER);
        } else {
            pstmt.setInt(i, obj.intValue());
        }

    }

    public static void nullOrInt(PreparedStatement pstmt, int i, int iv) throws SQLException {
        if (iv < 0) {
            iv = 0;
        }
        pstmt.setInt(i, iv);
    }

    public static void nullOrString(PreparedStatement pstmt, int i, Object object)
            throws SQLException {
        if (null == object) {
            pstmt.setNull(i, java.sql.Types.VARCHAR);
        } else {
            pstmt.setString(i, object.toString());
        }
    }

    public static int queryAgi(PreparedStatement pstmt) throws SQLException {
        ResultSet rs = pstmt.getGeneratedKeys();
        int agi = -1;
        if (rs.next()) {
            agi = rs.getInt(1);

        } else {

        }
        rs.close();
        return agi;
    }
}
